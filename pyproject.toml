[project]
dependencies = [
  "numpy<2.0",
  "torch==2.6.0",
  "packaging",
  "tqdm",
  "pyyaml",
  "transformers",
  "datasets",
  "protobuf",
  "SentencePiece",
  "rich",
  "omegaconf",
  "pydantic",
  "click",
  "click_pathlib",
  "jq",
  "class_resolver",
  "wandb",
  "einops>=0.7.0",
]
description = "Modalities, a PyTorch-native framework for distributed and reproducible foundation model training."
name = "modalities"
readme = "README.md"
requires-python = ">=3.10,<3.12"
version = "0.3.2"

[project.urls]
Homepage = "https://github.com/Modalities/modalities"
Issues = "https://github.com/Modalities/modalities/issues"

[project.optional-dependencies]
install_helper = ["ninja"]
linting = ["pre-commit"]
tests = ["pytest", "pytest-cov", "debugpy"]

[project.scripts]
modalities = "modalities.__main__:main"

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 61.0.0"]

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.isort]
line_length = 120
profile = "black"
src_paths = ["src", "tests"]

[tool.ruff]
line-length = 120

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report term --cov-report html"

[tool.coverage.run]
branch = true
omit = ["*/src/modalities/dataloader/open_gptx_dataset/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug", # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError", # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:", # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
